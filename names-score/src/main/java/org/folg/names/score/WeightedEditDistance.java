/*
 * Copyright 2011 Foundation for On-Line Genealogy, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.folg.names.score;

import java.io.IOException;

/**
 * Computes an "edit distance" where the actual edit costs are weighted according to a model
 * The model was generated by running training data provided by Ancestry.com through an EM algorithm
 */
public class WeightedEditDistance {
   // differences near the beginning cost more than differences near the end
   // differences near the end of surnames cost more than differences near the end of given names
   private static final double SURNAME_SMOOTH = 5;
   private static final double GIVENNAME_SMOOTH = 2.5;

   private final WeightedEdits we;
   private final WeightedEditDistanceTokenizer wedt;
   private final double smooth;

   public WeightedEditDistance(boolean isSurname) {
      we = new WeightedEdits();
      String filename = (isSurname ? "surname" : "givenname")+"WeightedEdits.model";
      try {
         we.load(getClass().getClassLoader().getResourceAsStream(filename));
      }
      catch (IOException e) {
         throw new RuntimeException("Can't find "+filename);
      }
      wedt = new WeightedEditDistanceTokenizer();
      smooth = isSurname ? SURNAME_SMOOTH : GIVENNAME_SMOOTH;
   }

   public double getScore(int[] sourceTokens, int[] targetTokens) {
      if (sourceTokens.length == 0 || targetTokens.length == 0) {
         return Double.NEGATIVE_INFINITY;
      }
      // order of source, target may make a difference.  See comment in FST.java.
      FST fst = new FST(sourceTokens, targetTokens);
      fst.computeBestPath(we);
      return fst.getBestPathScore(we, smooth);
   }

   public int[] tokenize(String s) {
      return wedt.tokenize(s);
   }
}
